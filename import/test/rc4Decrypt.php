<?php

$hash_key = "6da9365c8fec110c9e56173832717885";
$encrypted = "fe5da06c901dc553ded20f3d0f2313db60ea33d8a355ee43f9d01afa4a416cb6d605e1d00ef2519b7e59ea2d128daa8d1c266d98f6206f1cf10446179de2176d66d24a7e8cd73852ac806e9f478a57f044bdbcd4a144ef098d32acd8c9fcb0a0a2dbec81be0c43f5e24e1516b8462843903c730a0e7d06b51c4a65ffc5f52d22c4692df6949b1bc6fb22aa9758acff17fb157fc8926e5fc1ad35d43078facf9ade0be99878982d8dbb39f33c6035309402b5a5b84bb5cbe1741d3e37507bdebbe0023c4d6d02753208cc7bb54f6220a2d3aab52b29493a4a22f7e1cb20249f57f55818a18cba838d315162b084022d37051af6f4787ce04a478401e6f837ca19d64b6a5658bbfff61c6b68f0e57987feb0c73a11000054ee04209ceff57f1c728858f62ddff04225a1ab0f4f68250a3265b072ac6ecc42ef60d1b5aa066468cafa3af63863ae6c0890e31c34de0dc13cc3361fb5d3d55dd61cde8ba94e23291552786344b11b5a56ce775a1706bee7960c398360e1cd32b128a46a209504d5802fff8edf11abce2898f2dfa497031fce3e3389a031546ab64aaef47544457952292f7f0d02ab1afbb7178d09f7b28f592685fb2cbc06c7f3750f27ff9576ef9df3d977715e4c1c4707ce22ec2695d2de06a4b8536a14ef8a79f96d28af7ea2c8d7a2794c80f21c1fb37823cdb6ba4a767732d5d924c72201dc8ab0d39fa7a05f0d6477a13100b58d592f640cfa6dd9b2a5e0a111cb3ac7e0ec9a816a779b29550cc3989e1ba2283e6d0991101223a791cc15415f3b590cac3565cd414c538dbe10d8274164e6a17074c6f085211026c87877440d05f5377cd5a343e25890795df2cddf9221f3da269b0a600bb3d8bc19a7eabcded39a138682bbab60ba086f40b3a9d4f10e0a6a0c0cb939365d8cc21ab42c38196e90b97a78a03cda810d2d3efef9f3f52243762c9c6bf63882c1604949f8a79982d6fe31900ea92fdde408d02b344d04c8482704d23e1163f4bea6fb183542c49e9d459873ef7b3203e9dcda48e7379af8f96a614c33bd939486b029888cf992b888a8586ad491c6822fb3b729e4d175edb28cfbf2da3a1af90dc0ac57b58a3a6f6d2b34a598d1fe82e9ede5371611faca24330c6f8da5e5fdb228c31db03d433d1b42a4ddb6aedb0b48ad97e5f30bd4000489b60b820dbfcb63f17f85c68023f06ebb6c89eb072e4e01d0052e5c718fd3465df67f3c94a7b0ad95379045f7ecf93a0d308bed13120ae348eb1f4f19176084aa274eb77bd7e09375824eb448428f4435104fb52920130491ff757f0c2c0372e7c999d86056cf7a1e8f8faa9d48ebc1d0dbbd21ff9cef3a43146de1dc68d408079954b11fa8e4ccb2f65acc02b5276e99b7560cca22902354516a4f0c4e6d5e910c0759ece89bd6a872b28131f294430dffcdb2d19b36048772f7369d4e9b644d9b72e438d31fb6ce25b44ee087217efd3b24d65f9c8fbd7ebb01e4c1a91d19a59de3ce4cccb5745aa56f88632bd10a4c359b4172c391ad5de8b1e31b92b42f32072d07f84fd1c1d2fca3c8eccc5174e7dff88b9fee82eaef9631be1c1f3273e73f6dddef5bb2da5662687f1d105240a908ab6598e29e51ed20206bb71e1a8ebdd5c8de40796aeac368492b17cb0373066e5a7d27127840dd104a99289f3a56bf705cdd96e747cdbd718319d39fbc17249dfe9cf6669b4ae824045b4a4d396105a845f22652482dd68e104bd9bfe64d6804a268ee40ef29185fa7486a2f31a39154f2920200fc44a7dadca919999543be864c92a8e566f0d1848203acf9f3444244af6f6c3d377430975904d6aeb5fddfb67b4271b001c8f0204ce5a46ab72edd80d9d9351592df678105a2bd221bac7abf77e4a71ad6c0e77ac70741ac030d8b2a5eb1fd11682dfd5846567ebf3987d0eae7098fb25f427271de530207d90ccb27dd2a444077a4f35e4195bd4c5216889ae14c52b2a44af0a98517bcdafc88b2e9b229aaa8158b6fc5e22f21ff4e19350b825abb445dbaf55b661758051cc12ccbe304d44d82d30cfda92f0e6265a77daf66bdfdff58d39e0ae3fee8764f8fb453e0e3413945d2830c5bc6819f85c07aa7c418a149d15ef4a4e44cc9d08a9f89d78cb67ef3b6c0010de53153a8f5931c6a24f1eac1ff2faa367d1ac4525b3534a4ca537c248a4d4406b4b9181b925fbb912d729afac1b8d2ab509997a207a6791db0f399a229edfa2e8b5eb5544ebe772ef1b91e84f0f09f39839011e59ff5b04d236cb0fe265e290b83eea3726fe639edaab01f1c23547441a17e8195096288dd6d2ea0624c2e1a24795da313adf7c2b44e84a7581884e14214607b860bb9606ec9acc613e7ae2dc1a8f704e9109a6434d593a1764bac6f1da8e7bf5381d1eb336247dd83c1b0d1d45ca9f4d5274fe0ab74594c50d0cd9b05371e4b175a9cec7014d45e03038192918a664ef33d205e146589172490485aabe1412266fb022f9b0312f619ec45de8fb9adc7d131b6f9ce6f1b72e2f17588aeb0e7a7f90af7d53b4ef251a53482fd15f42f6cb23ba91fc1cfdf700f00b5947db5993fe7f83e81b85f72770d4b6ed451a4857d1abac866665ec6030f3d960772f9ebe0228441e333172c1fe91d415bac462c943ecfb8b666336e3ab3a142904c4f5795eccc58af3c7e01342d4cb708ad90ce678321c3634174e8967534ef6c3aaa409fbffa59f4a15ee8499f80ee1a5d25c1c4eec7f98c552a61eee15d11a3ae05e5cd7dbe060981b8dd7ac2c0c52d0a4cf84a06dd5effce7399b0f09647ca213eaa6ee1af4fe71701efe405d90476c09ccc0472c84faa2244946e671522ef7b4be7913c91459fbcfe38eb026072d4926489888b0050eaab8c4d8cf989bece08057b04a08ef9a72de29acdb44f28a0eeb4c6ffcc25e563bdfc5d340e9c3920985051a0c020afac685c4dc39454ee6a4dd41458a9330439498fb374fa404dff44e021d30a431fc35e5d7870d6c359da59558f5a173ecf63b25962d818df956fef9cdef2d38b61995019dbba6c4b82cc7c62041804f094ba437b68b766d382057f6eadf5b691a8414fcdce017a3e566735860475c6ce73ffd2234f33992384fcf4235e011aa5935306e657fe3bb18631cdf7653a1faa0b9104604083803de7ea72decd8026eedf8d9e6797fcf355b579f891f1dd18e14b34632e3ea2e789113d23e3ca21a01c0eded38f7a2444bd75ef4cdc1967c1c2fd8f00a418bd4ca230fa05524427852a24bc8ccf26f98129dec4a4ecdf92b21eb50d9cad078c84cf22bc41144bf26527e9a8061721fc49d9c8cee13c2e710af03f593b36aff6a65d9ae5990342612233dcaae010091e0e418c7c620893823fa461a3290457364137acbbd7029c71947ab796fbacaa34c1ffdf3a7a70800fe5dd92b9af3063afc97ea5249205e9d634b8e44b6d2ade25a5f6e633e0393c56f708ea612988c9461bb1b79d0b9b9b2317070ddaa2b8593aa57cdad33dcce9101f8026637d3e18ed004eadd191ae934a7f4f20c76c7d3724e28bf7205531879c18f9f292df584d81567b6892558381dc1bf0ef35275ec475901a40cbe34cc326696a1fa4b1f3b5a6ad75862c079c2c9ef7d9f468131a66da67ed13810e4fb4db3c5b25bf2c04c3a6009985bdc9834d8831e1a982e9fbed3b561653dda3da7baf545b7d928233ebd1222880373636445ea08e46c571de02ef2b5de890fc930d31463e7a25193dc4f97e53c22cde1869bba1d0f0c6e93c8a80af1816ff4ca607c2999f77c1a6ff9b26cacb0a7604e011e500414b187162b08b744aa055e1021acfc8a1070449414d19b7aa2caeb6bd25d7338ca7450b0ff7d6aee74d409b1ac5a27415726e6cd5d53a3b1f9cd411dce13d38d4b189df12740b40c0f1e27b2b281b937b80ef4d89631d99d5ab6f29b28a05b1faa83e8c10f198dd7d8eb6d47c237d58137724cc86dd649ba8fb3f101e068b1f24b121a61283da8cee3a06d9e62766ba7497f72119348ad09e11681eea1a7ae6a31245e7df0945e93e151ad0a85d9cf5b6aacadec74e9bc76a853321f466d5fd7cb2b733829ae75040abcf5831f6250d4ddbc217ceefc6c0a8e610f1b21a15ca0f2d583703feed4d8338565d9695f0a0d1ead24ce03266156a42a5e10f4d0272610e6c9165c6387ce4337aecfb2dd0ce27a05154c3cb1d56f8d59ade9d93557189736c5ce0003f18e894a92ce41cac88258796792b0be8a2581fc9b70eced801a7048f7670cd06a51713075e63b77d4c5ea74859304f63e0c5c894cd18038c74b534909f7691ffc6eb13f15b18a70a33385380ab534244a5974a55a6f366ebd056d9f738f120cfab9e61f03ce52662a09b35bd8daeddc2e3fac6c1a9145d576c43785c575db7888eb47495e77d5dd337d92cda68f81026cfca3f1de4347c8bc0c432e6a61522066691e1f20faaaa09e36bfac998cd42d04c646c06c3091751c547bde4e3890e8e15e006f1a9a4aa8d0cf974393d183563727381b2a352644aeb9288310729b74165533559839443a27dcc5d33916b5ca568d863abbbef3eea2b5c23e150a0cef1e83e951dcc831d76c58fa68167339e275446c5bf0e518e89d0b0d62ac2d4c269c93a8fce33ba781746108f70469160f593a9ab4b68affd15ac53a695454da555887b553e7306dbe4e8228f5ec9f259d2141186dcc1edaa73276e61449dc7f61eceafd8383da53bcc1c2a7756cf6dcdb8cb41561863f97730548897a65c99a875c47fbd2e296a3477d77fa0dc9ce9e6e4ddc6d8c2d8370fe1d3e200ae5423b489b70aa8557738da1dfa0fc169ecf407657dab5703e8427331c65f3d161a16b600cc9ca61c13cb75a0f66d55753c4a5052fd14654f6ddc67f0b193f85a093b8c21cd90e96499b906c9d654b02b80721fe796f86e1498863c1a02accfe19711aa5ea265340bb8df4f6496284b925471d953bfdcd8e7ffc706098e1aeeb870945a003f4d2af6a8f9ef93bba5209850896b9611626bf48026185899265e28d0760659a9a066c180ae35182d7dbc13a8f22829e0c0ae2c751bf1a6d987136ee1a152154f2f1155d1fff1bbb5e52b4ce0";

//$hash_key = "foo";
//$clear = "please?";
//$encrypted = "db4e8848bb0464";


$rc4 = new RC4();
//$encrypted = $rc4->encrypt($hash_key, $clear);
$decrypted = $rc4->decrypt($hash_key, pack("H*" , $encrypted));

echo $decrypted;

class RC4
{
    /**
     * Store the permutation vectors
     *
     * @var array
     */
    private static $S = array();
    
    /**
     * Swaps values on the permutation vector.
     *
     * @param int $v1 Value 1
     * @param int $v2 Value 2
     */
    private static function swap(&$v1, &$v2)
    {
        $v1 = $v1 ^ $v2;
        $v2 = $v1 ^ $v2;
        $v1 = $v1 ^ $v2;
    }
    
    /**
     * Make, store and returns the permutation vector about the key.
     *
     * @param string $key Key
     * @return array
     */
    private static function KSA($key)
    {
        $idx = crc32($key);
        if (!isset(self::$S[$idx])) {
            $S   = range(0, 255);
            $j   = 0;
            $n   = strlen($key);
            for ($i = 0; $i < 255; $i++) {
                $char  = ord($key{$i % $n});
                $j     = ($j + $S[$i] + $char) % 256;
                self::swap($S[$i], $S[$j]);
            }
            self::$S[$idx] = $S;
        }
        return self::$S[$idx];
    }
    
    /**
     * Encrypt the data.
     *
     * @param string $key Key
     * @param string $data Data string
     * @return string
     */
    public static function encrypt($key, $data)
    {
        $S    = self::KSA($key);
        $n    = strlen($data);
        $i    = $j = 0;
        $data = str_split($data, 1);
        for ($m = 0; $m < $n; $m++) {
            $i        = ($i + 1) % 256;
            $j        = ($j + $S[$i]) % 256;
            self::swap($S[$i], $S[$j]);
            $char     = ord($data{$m});
            $char     = $S[($S[$i] + $S[$j]) % 256] ^ $char;
            $data[$m] = chr($char);
        }
        $data = implode('', $data);
        return $data;
    }
    
    /**
     * Decrypts the data.
     *
     * @param string $key Key
     * @param string $data Encripted data
     * @return string
     */
    public static function decrypt($key, $data)
    {
        return self::encrypt($key, $data);
    }
}

function hex2bin($str) {
    $bin = "";
    $i = 0;
    do {
        $bin .= chr(hexdec($str{$i}.$str{($i + 1)}));
        $i += 2;
    } while ($i < strlen($str));
    return $bin;
}
	
